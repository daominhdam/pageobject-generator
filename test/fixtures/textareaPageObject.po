var PageObject = function () {

   this.idModel = element(by.id('onlyId'));
   this.items = element.all(by.exactRepeater('item in items'));
   this.nameOverride = element(by.id('ignoredId'));
   this.onlyModel = element(by.model('onlyModel'));

   this.get = function () {
      browser.get('');
   };

   this.setIdModel = function (value) {
      this.idModel.clear();
      this.idModel.sendKeys(value);
   };

   this.setNameOverride = function (value) {
      this.nameOverride.clear();
      this.nameOverride.sendKeys(value);
   };

   this.setNestedRepeaterTextField = function (rowIndex1, rowIndex2, value) {
      this.items.get(rowIndex1).element(by.exactRepeater('element in elements').row(rowIndex2)).element(by.model('nestedRepeaterTextField')).clear();
      this.items.get(rowIndex1).element(by.exactRepeater('element in elements').row(rowIndex2)).element(by.model('nestedRepeaterTextField')).sendKeys(value);
   };

   this.setOnlyModel = function (value) {
      this.onlyModel.clear();
      this.onlyModel.sendKeys(value);
   };

   this.setRepeatedTextField = function (rowIndex1, value) {
      this.items.get(rowIndex1).element(by.name('repeatedTextField')).clear();
      this.items.get(rowIndex1).element(by.name('repeatedTextField')).sendKeys(value);
   };

   this.elementsCountShouldBe = function (rowIndex1, count) {
      expect(this.items.get(rowIndex1).all(by.exactRepeater('element in elements')).count()).toBe(count);
   };

   this.elementsShouldHaveClass = function (rowIndex1, rowIndex2, className) {
      this.items.get(rowIndex1).all(by.exactRepeater('element in elements')).get(rowIndex2).getAttribute('class').then(function (classes) {
         expect(classes.split(' ').indexOf(className) !== -1).toBe(true);
      });
   };

   this.elementsShouldNotHaveClass = function (rowIndex1, rowIndex2, className) {
      this.items.get(rowIndex1).all(by.exactRepeater('element in elements')).get(rowIndex2).getAttribute('class').then(function (classes) {
         expect(classes.split(' ').indexOf(className) === -1).toBe(true);
      });
   };

   this.elementsShouldHaveText = function (rowIndex1, rowIndex2, value) {
      expect(this.items.get(rowIndex1).all(by.exactRepeater('element in elements')).get(rowIndex2).getText()).toBe(value);
   };

   this.idModelShouldBeEnabled = function () {
      expect(this.idModel.isEnabled()).toBe(true);
   };

   this.idModelShouldNotBeEnabled = function () {
      expect(this.idModel.isEnabled()).toBe(false);
   };

   this.idModelShouldBeVisible = function () {
      expect(this.idModel.isDisplayed()).toBe(true);
   };

   this.idModelShouldNotBeVisible = function () {
      expect(this.idModel.isDisplayed()).toBe(false);
   };

   this.itemsCountShouldBe = function (count) {
      expect(this.items.count()).toBe(count);
   };

   this.itemsShouldHaveClass = function (rowIndex1, className) {
      this.items.get(rowIndex1).getAttribute('class').then(function (classes) {
         expect(classes.split(' ').indexOf(className) !== -1).toBe(true);
      });
   };

   this.itemsShouldNotHaveClass = function (rowIndex1, className) {
      this.items.get(rowIndex1).getAttribute('class').then(function (classes) {
         expect(classes.split(' ').indexOf(className) === -1).toBe(true);
      });
   };

   this.itemsShouldHaveText = function (rowIndex1, value) {
      expect(this.items.get(rowIndex1).getText()).toBe(value);
   };

   this.nameOverrideShouldBeEnabled = function () {
      expect(this.nameOverride.isEnabled()).toBe(true);
   };

   this.nameOverrideShouldNotBeEnabled = function () {
      expect(this.nameOverride.isEnabled()).toBe(false);
   };

   this.nameOverrideShouldBeVisible = function () {
      expect(this.nameOverride.isDisplayed()).toBe(true);
   };

   this.nameOverrideShouldNotBeVisible = function () {
      expect(this.nameOverride.isDisplayed()).toBe(false);
   };

   this.nestedRepeaterTextFieldShouldBeEnabled = function (rowIndex1, rowIndex2) {
      expect(this.items.get(rowIndex1).element(by.exactRepeater('element in elements').row(rowIndex2)).element(by.model('nestedRepeaterTextField')).isEnabled()).toBe(true);
   };

   this.nestedRepeaterTextFieldShouldNotBeEnabled = function (rowIndex1, rowIndex2) {
      expect(this.items.get(rowIndex1).element(by.exactRepeater('element in elements').row(rowIndex2)).element(by.model('nestedRepeaterTextField')).isEnabled()).toBe(false);
   };

   this.nestedRepeaterTextFieldShouldBeVisible = function (rowIndex1, rowIndex2) {
      expect(this.items.get(rowIndex1).element(by.exactRepeater('element in elements').row(rowIndex2)).element(by.model('nestedRepeaterTextField')).isDisplayed()).toBe(true);
   };

   this.nestedRepeaterTextFieldShouldNotBeVisible = function (rowIndex1, rowIndex2) {
      expect(this.items.get(rowIndex1).element(by.exactRepeater('element in elements').row(rowIndex2)).element(by.model('nestedRepeaterTextField')).isDisplayed()).toBe(false);
   };

   this.onlyModelShouldBeEnabled = function () {
      expect(this.onlyModel.isEnabled()).toBe(true);
   };

   this.onlyModelShouldNotBeEnabled = function () {
      expect(this.onlyModel.isEnabled()).toBe(false);
   };

   this.onlyModelShouldBeVisible = function () {
      expect(this.onlyModel.isDisplayed()).toBe(true);
   };

   this.onlyModelShouldNotBeVisible = function () {
      expect(this.onlyModel.isDisplayed()).toBe(false);
   };

   this.repeatedTextFieldShouldBeEnabled = function (rowIndex1) {
      expect(this.items.get(rowIndex1).element(by.name('repeatedTextField')).isEnabled()).toBe(true);
   };

   this.repeatedTextFieldShouldNotBeEnabled = function (rowIndex1) {
      expect(this.items.get(rowIndex1).element(by.name('repeatedTextField')).isEnabled()).toBe(false);
   };

   this.repeatedTextFieldShouldBeVisible = function (rowIndex1) {
      expect(this.items.get(rowIndex1).element(by.name('repeatedTextField')).isDisplayed()).toBe(true);
   };

   this.repeatedTextFieldShouldNotBeVisible = function (rowIndex1) {
      expect(this.items.get(rowIndex1).element(by.name('repeatedTextField')).isDisplayed()).toBe(false);
   };

   this.shouldHaveIdModel = function (value) {
      expect(this.idModel.getAttribute('value')).toEqual(value);
   };

   this.shouldHaveNameOverride = function (value) {
      expect(this.nameOverride.getAttribute('value')).toEqual(value);
   };

   this.shouldHaveNestedRepeaterTextField = function (rowIndex1, rowIndex2, value) {
      expect(this.items.get(rowIndex1).element(by.exactRepeater('element in elements').row(rowIndex2)).element(by.model('nestedRepeaterTextField')).getAttribute('value')).toEqual(value);
   };

   this.shouldHaveOnlyModel = function (value) {
      expect(this.onlyModel.getAttribute('value')).toEqual(value);
   };

   this.shouldHaveRepeatedTextField = function (rowIndex1, value) {
      expect(this.items.get(rowIndex1).element(by.name('repeatedTextField')).getAttribute('value')).toEqual(value);
   };

};

module.exports = PageObject;
